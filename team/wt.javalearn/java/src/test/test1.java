
import java.awt.*;
import java.math.BigDecimal;
import java.util.*;
import java.util.List;

public class test1 {
    static class Point1 extends java.awt.Point {
//        java.text.NumberFormat NF = java.text.NumberFormat.getInstance();

        public double getDx() {
            return dx;
        }

        public void setDx(double dx) {
            this.dx = dx;
        }

        public double getDy() {
            return dy;
        }

        public void setDy(double dy) {
            this.dy = dy;
        }

        java.lang.Double dx;
        java.lang.Double dy;
        public Point1(double dx,double dy){
            this.dx=dx;
            this.dy=dy;
        }

        @Override
        public String toString() {
            return String.format("%f",dx) + "," +String.format("%f",dy);
        }
    }
    public String outerTrees(String points) {
        String[] ps=points.split(";" +
                "" +
                "");
        Point1[] points1=new Point1[ps.length];
        for (int i = 0; i < ps.length; i++) {
            String[] p = ps[i].split(",");
            points1[i] = new Point1(Double.valueOf(p[0]), Double.valueOf(p[1]));
        }
        List<Point1> lp=GrahamScan(points1);
        StringBuffer sb=new StringBuffer();
        for (int i = 0; i <lp.size() ; i++) {
            sb.append(lp.get(i).toString()).append(";" +
                    "" +
                    "");
        }
        sb.deleteCharAt(sb.length()-1);
        return sb.toString();
    }

    private List<Point1> GrahamScan(Point1[] points){
        int n = points.length;
        if (n <= 2) return Arrays.asList(points);
        //排序的原因是什么
        Arrays.sort(points,new Comparator<Point1>(){
            @Override
            public int compare(Point1 o1, Point1 o2) {
                return  (!o1.dy.equals(o2.dy) ?
                        (o1.dy - o2.dy)<0?-1:1 :
                        (o1.dx - o2.dx)<0?-1:1);
            }
        });
        System.out.println(Arrays.toString(points));
        List<Point1> list=Arrays.asList(points);
        LinkedList<Point1> retlist=new LinkedList<>();
        int c=2;
        retlist.add(list.get(0));
       while (true){
           if (cross(list.get(c-2), list.get(c-1),list.get(c))>=0){ // 最好情况
               retlist.add(list.get(c-1));
               c++;
           }else {// 如果选中第三个点
               int b=1;
               retlist.removeLast();
               while (true) {
                   if (c > 0 && cross(list.get(c-b-2), list.get(c-b-1), list.get(c)) >= 0) {
                        list.set(list.size()+1,list.get(c-1));
                        list.remove(c-1);
                        retlist.add(list.get(c-b-1));
                        retlist.add(list.get(c));
                        c++;
                        break;
                   } else {
                       b++;
                   }
               }
           }
           if (c>=list.size()){
               break;
           }
        }
        System.out.println(retlist.size());
        System.out.println(retlist.toString());
        int[] stack = new int[n+2];
        int p = 0;
        //一个O(n)的循环
        for (int i = 0; i < n; i++) {
            while (p >= 2 && cross(points[stack[p - 2]], points[i], points[stack[p - 1]]) > 0)
                p--;
            stack[p++] = i;
        }

        int inf = p + 1;
        for (int i = n -2; i >= 0; i--){
            if (equal(points[stack[p-2]], points[i])) continue;
            while (p >= inf && cross(points[stack[p-2]], points[i], points[stack[p-1]]) > 0)
                p--;
            stack[p++] = i;
        }

        int len = Math.max(p - 1, 1);
        List<Point1> ret = new ArrayList<>();
        for (int i = 0; i < len; i++){
            ret.add(points[stack[i]]);
        }

        return ret;
    }

    private static Double cross(Point1 o, Point1 a, Point1 b){
        return (a.dx-o.dx)*(b.dy-o.dy) - (a.dy - o.dy) * (b.dx - o.dx);
    }

    private boolean equal(Point1 a, Point1 b){
        return a.dx == b.dx && a.dy == b.dy;
    }

    public static void main(String[] args) {
        Point[] aaa={
                new Point(0,0),
                new Point(0,1),
                new Point(1,0),
                new Point(2,1),
                new Point(2,2),
                new Point(1,3),
                new Point(0,3),
                new Point(-1,2),
                new Point(-1,1),
        };
        test1 aa1=new test1();
//        System.out.println(test1.cross(new Point1(0,0),new Point1(3,3),new Point1(0,3)));
//        System.out.println(aa1.outerTrees("126.579491,45.728256;126.580032,45.728214;126.580299,45.728378;126.580673,45.728088;126.580925,45.72789;126.581268,45.72789;126.581413,45.727932;126.581573,45.728012;126.581444,45.728157;126.581429,45.728157;126.581703,45.728325;126.581749,45.728355;126.582314,45.728699;126.582687,45.728413;126.583672,45.728298;126.583778,45.72823;126.583466,45.727879;126.583405,45.727825;126.583008,45.727448;126.582993,45.727444;126.583176,45.727322;126.58326,45.727261;126.58326,45.727257;126.583176,45.727314;126.582458,45.726757;126.582451,45.726757;126.58255,45.726692;126.582634,45.726631;126.583046,45.726379;126.583473,45.726185;126.583473,45.726181;126.583481,45.726181;126.583565,45.726128;126.583588,45.726097;126.583603,45.726055;126.583527,45.725887;126.583519,45.725842;126.583519,45.725792;126.583549,45.725746;126.583069,45.725124;126.583122,45.725101;126.583893,45.724522;126.582558,45.724293;126.582726,45.724159;126.582024,45.723698;126.581375,45.724163;126.580841,45.723999;126.580894,45.724171;126.580963,45.72443;126.581032,45.724583;126.581238,45.724861;126.581512,45.725124;126.581123,45.725449;126.581108,45.725452;126.581024,45.725391;126.580299,45.724915;126.579926,45.724663;126.579369,45.724289;126.579063,45.724079;126.578682,45.72435;126.578606,45.724392;126.578468,45.724415;126.57814,45.724201;126.577927,45.724232;126.577721,45.724102;126.577583,45.724003;126.577484,45.723949;126.577316,45.723839;126.576889,45.724159;126.576614,45.724377;126.576103,45.724983;126.576073,45.724998;126.575958,45.725094;126.575523,45.725517;126.57518,45.725723;126.575165,45.725761;126.575165,45.725788;126.575157,45.725788;126.575188,45.725834;126.575851,45.726257;126.575546,45.726654;126.573288,45.727631;126.574234,45.728245;126.575737,45.728386;126.575546,45.728546;126.575386,45.728657;126.575165,45.728844;126.575157,45.728844;126.5756,45.729141;126.575592,45.72921;126.575531,45.729252;126.57534,45.72937;126.575256,45.729427;126.57563,45.729973;126.575859,45.729801;126.576042,45.729599;126.576042,45.729595;126.576141,45.729664;126.576233,45.729557;126.576233,45.729549;126.576523,45.729752;126.577011,45.730057;126.577652,45.730465;126.577759,45.72937;126.577408,45.729061;126.577065,45.728889;126.577057,45.728886;126.578621,45.727688;126.579056,45.727352;126.579063,45.727348;126.579674,45.727787;126.579491,45.728256" ));
        System.out.println(aa1.outerTrees("1,1;1,0;2,1;0,0;-1,1;0,3;0,2;0,1;-1,2;1,3;2,2" ));
//        System.out.println(aa1.outerTrees("" +
//                "0.079491,0.028256;" +
//                "0.080032,0.028214;" +
//                "0.080299,0.028378;" +
//                "0.080673,0.028088;" +
//                "0.080925,0.02789;" +
//                "0.081268,0.02789;" +
//                "0.081413,0.027932;" +
//                "0.081573,0.028012;" +
//                "0.081444,0.028157;" +
//                "0.081429,0.028157;" +
//                "0.081703,0.028325;" +
//                "0.081749,0.028355;" +
//                "0.082314,0.028699;" +
//                "0.082687,0.028413;" +
//                "0.083672,0.028298;" +
//                "0.083778,0.02823;" +
//                "0.083466,0.027879;" +
//                "0.083405,0.027825;" +
//                "0.083008,0.027448;" +
//                "0.082993,0.027444;" +
//                "0.083176,0.027322;" +
//                "0.08326,0.027261;" +
//                "0.08326,0.027257;" +
//                "0.083176,0.027314;" +
//                "0.082458,0.026757;" +
//                "0.082451,0.026757;" +
//                "0.08255,0.026692;" +
//                "0.082634,0.026631;" +
//                "0.083046,0.026379;" +
//                "0.083473,0.026185;" +
//                "0.083473,0.026181;" +
//                "0.083481,0.026181;" +
//                "0.083565,0.026128;" +
//                "0.083588,0.026097;" +
//                "0.083603,0.026055;" +
//                "0.083527,0.025887;" +
//                "0.083519,0.025842;" +
//                "0.083519,0.025792;" +
//                "0.083549,0.025746;" +
//                "0.083069,0.025124;" +
//                "0.083122,0.025101;" +
//                "0.083893,0.024522;" +
//                "0.082558,0.024293;" +
//                "0.082726,0.024159;" +
//                "0.082024,0.023698;" +
//                "0.081375,0.024163;" +
//                "0.080841,0.023999;" +
//                "0.080894,0.024171;" +
//                "0.080963,0.02443;" +
//                "0.081032,0.024583;" +
//                "0.081238,0.024861;" +
//                "0.081512,0.025124;" +
//                "0.081123,0.025449;" +
//                "0.081108,0.025452;" +
//                "0.081024,0.025391;" +
//                "0.080299,0.024915;" +
//                "0.079926,0.024663;" +
//                "0.079369,0.024289;" +
//                "0.079063,0.024079;" +
//                "0.078682,0.02435;" +
//                "0.078606,0.024392;" +
//                "0.078468,0.024415;" +
//                "0.07814,0.024201;" +
//                "0.077927,0.024232;" +
//                "0.077721,0.024102;" +
//                "0.077583,0.024003;" +
//                "0.077484,0.023949;" +
//                "0.077316,0.023839;" +
//                "0.076889,0.024159;" +
//                "0.076614,0.024377;" +
//                "0.076103,0.024983;" +
//                "0.076073,0.024998;" +
//                "0.075958,0.025094;" +
//                "0.075523,0.025517;" +
//                "0.07518,0.025723;" +
//                "0.075165,0.025761;" +
//                "0.075165,0.025788;" +
//                "0.075157,0.025788;" +
//                "0.075188,0.025834;" +
//                "0.075851,0.026257;" +
//                "0.075546,0.026654;" +
//                "0.073288,0.027631;" +
//                "0.074234,0.028245;" +
//                "0.075737,0.028386;" +
//                "0.075546,0.028546;" +
//                "0.075386,0.028657;" +
//                "0.075165,0.028844;" +
//                "0.075157,0.028844;" +
//                "0.0756,0.029141;" +
//                "0.075592,0.02921;" +
//                "0.075531,0.029252;" +
//                "0.07534,0.02937;" +
//                "0.075256,0.029427;" +
//                "0.07563,0.029973;" +
//                "0.075859,0.029801;" +
//                "0.076042,0.029599;" +
//                "0.076042,0.029595;" +
//                "0.076141,0.029664;" +
//                "0.076233,0.029557;" +
//                "0.076233,0.029549;" +
//                "0.076523,0.029752;" +
//                "0.077011,0.030057;" +
//                "0.077652,0.030465;" +
//                "0.077759,0.02937;" +
//                "0.077408,0.029061;" +
//                "0.077065,0.028889;" +
//                "0.077057,0.028886;" +
//                "0.078621,0.027688;" +
//                "0.079056,0.027352;" +
//                "0.079063,0.027348;" +
//                "0.079674,0.027787;" +
//                "0.079491,0.028256"));
    }
}
